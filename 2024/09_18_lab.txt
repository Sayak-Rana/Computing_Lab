int * a[10] //an array of 10 pointers to integers.

int (*a)[10] //pointer to array of 10 integers.

typedef int * ARRAY_OF_INT_PTRS[10];

ARRAY_OF_INT_PTRS a; // now we don't need to define this many a times.

typedef int (*PTR_INT_ARRAY10)[10];
PTR_INT_ARRAY10 b;

//only arrays are passed by reference; everything gets passed by value.


//function involving struct as argument

//Case -1 

struct student 
{
    char name[10];
}

char name[10];
name[0] = 'A'; // Allowed
name = "ABC"; //Not Allowed

f(struct student s)
{
    s.name = "XYZ";//Not Allowed
    strcpy(s.name,"XYZ");//Allowed
}

//Allowed vs not Allowed

char name[10];
name[0] = 'A'; // Allowed
name = "ABC"; //Not Allowed

///////////////////////////////////

//function involving struct as argument

// case -2 
struct student 
{
    char * name;
}

//Allowed vs not Allowed

char * name = "XYZ";
name[0] = 'A'; // Not Allowed
name = "ABC"; //Allowed

struct student 
{
    char * name;
}

f(struct student s)
{
    s.name = "XYZ";//Allowed
    strcpy(s.name,"XYZ");//Not Allowed
}

/////////// 

struct student                         
{
    char * name;
}

struct student class[100];
for(int i = 0; i < 100; i++)
{
    class[i].name = (char*)malloc(10*sizeof(char));
    modify_name(class[i]);
}

modify_name(struct student s)
{
    strcpy(s.name, "newname");
}

//class[i].name and s.name point to the same memory address in the heap.
//So now its allowed.
